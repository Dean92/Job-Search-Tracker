{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"ngx-toastr\";\nexport class AuthGuard {\n  constructor(accountService, toastr) {\n    this.accountService = accountService;\n    this.toastr = toastr;\n  }\n  canActivate() {\n    return this.accountService.currentUser$.pipe(map(user => {\n      if (user) return true;else {\n        this.toastr.error('You are not authorized.');\n        return false;\n      }\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.ToastrService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAASA,GAAG,QAAoB,MAAM;;;;AAMtC,OAAM,MAAOC,SAAS;EACpBC,YACUC,cAA8B,EAC9BC,MAAqB;IADrB,mBAAc,GAAdD,cAAc;IACd,WAAM,GAANC,MAAM;EACb;EACHC,WAAW;IACT,OAAO,IAAI,CAACF,cAAc,CAACG,YAAY,CAACC,IAAI,CAC1CP,GAAG,CAAEQ,IAAI,IAAI;MACX,IAAIA,IAAI,EAAE,OAAO,IAAI,CAAC,KACjB;QACH,IAAI,CAACJ,MAAM,CAACK,KAAK,CAAC,yBAAyB,CAAC;QAC5C,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;;AAfWR,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAS,SAATT,SAAS;EAAAU,YAFR;AAAM","names":["map","AuthGuard","constructor","accountService","toastr","canActivate","currentUser$","pipe","user","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\deanm\\source\\repos\\JobSearchTracker\\ClientApp\\src\\app\\_guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, Observable } from 'rxjs';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private accountService: AccountService,\n    private toastr: ToastrService\n  ) {}\n  canActivate(): Observable<boolean> {\n    return this.accountService.currentUser$.pipe(\n      map((user) => {\n        if (user) return true;\n        else {\n          this.toastr.error('You are not authorized.');\n          return false;\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}