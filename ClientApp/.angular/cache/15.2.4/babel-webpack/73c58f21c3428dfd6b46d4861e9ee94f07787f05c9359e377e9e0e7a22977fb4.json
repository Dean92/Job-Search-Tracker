{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    this.accountService.currentUser$.pipe(take(1)).subscribe({\n      next: user => {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer  ${user?.token}`\n          }\n        });\n      }\n    });\n    return next.handle(request);\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,IAAI,QAAQ,MAAM;;;AAIvC,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAmB;EAErDC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,IAAI,CAACH,cAAc,CAACI,YAAY,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAAC;MACvDH,IAAI,EAAGI,IAAI,IAAI;QACbL,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;UACtBC,UAAU,EAAE;YACVC,aAAa,EAAE,WAAWH,IAAI,EAAEI,KAAK;;SAExC,CAAC;MACJ;KACD,CAAC;IACF,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EAC7B;;AAjBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;AAAA","names":["take","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser$","pipe","subscribe","user","clone","setHeaders","Authorization","token","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\deanm\\source\\repos\\JobSearchTracker\\ClientApp\\src\\app\\_interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable, take } from 'rxjs';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private accountService: AccountService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    this.accountService.currentUser$.pipe(take(1)).subscribe({\n      next: (user) => {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer  ${user?.token}`,\n          },\n        });\n      },\n    });\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}